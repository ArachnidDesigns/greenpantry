#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertShoppingList(ShoppingList instance);
  partial void UpdateShoppingList(ShoppingList instance);
  partial void DeleteShoppingList(ShoppingList instance);
  partial void InsertCard(Card instance);
  partial void UpdateCard(Card instance);
  partial void DeleteCard(Card instance);
  partial void InsertDevice(Device instance);
  partial void UpdateDevice(Device instance);
  partial void DeleteDevice(Device instance);
  partial void InsertAddress(Address instance);
  partial void UpdateAddress(Address instance);
  partial void DeleteAddress(Address instance);
  partial void InsertInvoiceLine(InvoiceLine instance);
  partial void UpdateInvoiceLine(InvoiceLine instance);
  partial void DeleteInvoiceLine(InvoiceLine instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertInvoice(Invoice instance);
  partial void UpdateInvoice(Invoice instance);
  partial void DeleteInvoice(Invoice instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertProductCategory(ProductCategory instance);
  partial void UpdateProductCategory(ProductCategory instance);
  partial void DeleteProductCategory(ProductCategory instance);
  partial void InsertSubCategory(SubCategory instance);
  partial void UpdateSubCategory(SubCategory instance);
  partial void DeleteSubCategory(SubCategory instance);
  partial void InsertListProduct(ListProduct instance);
  partial void UpdateListProduct(ListProduct instance);
  partial void DeleteListProduct(ListProduct instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<ShoppingList> ShoppingLists
	{
		get
		{
			return this.GetTable<ShoppingList>();
		}
	}
	
	public System.Data.Linq.Table<Card> Cards
	{
		get
		{
			return this.GetTable<Card>();
		}
	}
	
	public System.Data.Linq.Table<Device> Devices
	{
		get
		{
			return this.GetTable<Device>();
		}
	}
	
	public System.Data.Linq.Table<Address> Addresses
	{
		get
		{
			return this.GetTable<Address>();
		}
	}
	
	public System.Data.Linq.Table<InvoiceLine> InvoiceLines
	{
		get
		{
			return this.GetTable<InvoiceLine>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Invoice> Invoices
	{
		get
		{
			return this.GetTable<Invoice>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<ProductCategory> ProductCategories
	{
		get
		{
			return this.GetTable<ProductCategory>();
		}
	}
	
	public System.Data.Linq.Table<SubCategory> SubCategories
	{
		get
		{
			return this.GetTable<SubCategory>();
		}
	}
	
	public System.Data.Linq.Table<ListProduct> ListProducts
	{
		get
		{
			return this.GetTable<ListProduct>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingList")]
public partial class ShoppingList : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CustomerID;
	
	private EntitySet<ListProduct> _ListProducts;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    #endregion
	
	public ShoppingList()
	{
		this._ListProducts = new EntitySet<ListProduct>(new Action<ListProduct>(this.attach_ListProducts), new Action<ListProduct>(this.detach_ListProducts));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingList_ListProduct", Storage="_ListProducts", ThisKey="ID", OtherKey="ListID")]
	public EntitySet<ListProduct> ListProducts
	{
		get
		{
			return this._ListProducts;
		}
		set
		{
			this._ListProducts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ShoppingList", Storage="_User", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.ShoppingLists.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.ShoppingLists.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ListProducts(ListProduct entity)
	{
		this.SendPropertyChanging();
		entity.ShoppingList = this;
	}
	
	private void detach_ListProducts(ListProduct entity)
	{
		this.SendPropertyChanging();
		entity.ShoppingList = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Card")]
public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CustomerID;
	
	private string _Description;
	
	private string _Name;
	
	private string _Number;
	
	private System.DateTime _Expiry;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnExpiryChanging(System.DateTime value);
    partial void OnExpiryChanged();
    #endregion
	
	public Card()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Char(16) NOT NULL", CanBeNull=false)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiry", DbType="Date NOT NULL")]
	public System.DateTime Expiry
	{
		get
		{
			return this._Expiry;
		}
		set
		{
			if ((this._Expiry != value))
			{
				this.OnExpiryChanging(value);
				this.SendPropertyChanging();
				this._Expiry = value;
				this.SendPropertyChanged("Expiry");
				this.OnExpiryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Card", Storage="_User", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Cards.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Cards.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Device")]
public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DeviceID;
	
	private string _OS;
	
	private int _CustomerID;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceIDChanging(int value);
    partial void OnDeviceIDChanged();
    partial void OnOSChanging(string value);
    partial void OnOSChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    #endregion
	
	public Device()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DeviceID
	{
		get
		{
			return this._DeviceID;
		}
		set
		{
			if ((this._DeviceID != value))
			{
				this.OnDeviceIDChanging(value);
				this.SendPropertyChanging();
				this._DeviceID = value;
				this.SendPropertyChanged("DeviceID");
				this.OnDeviceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OS", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string OS
	{
		get
		{
			return this._OS;
		}
		set
		{
			if ((this._OS != value))
			{
				this.OnOSChanging(value);
				this.SendPropertyChanging();
				this._OS = value;
				this.SendPropertyChanged("OS");
				this.OnOSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_User", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Devices.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Devices.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Line1;
	
	private string _Line2;
	
	private string _Suburb;
	
	private string _City;
	
	private char _Billing;
	
	private string _Type;
	
	private int _CustomerID;
	
	private string _Province;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnSuburbChanging(string value);
    partial void OnSuburbChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnBillingChanging(char value);
    partial void OnBillingChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    #endregion
	
	public Address()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Line1
	{
		get
		{
			return this._Line1;
		}
		set
		{
			if ((this._Line1 != value))
			{
				this.OnLine1Changing(value);
				this.SendPropertyChanging();
				this._Line1 = value;
				this.SendPropertyChanged("Line1");
				this.OnLine1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line2", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Line2
	{
		get
		{
			return this._Line2;
		}
		set
		{
			if ((this._Line2 != value))
			{
				this.OnLine2Changing(value);
				this.SendPropertyChanging();
				this._Line2 = value;
				this.SendPropertyChanged("Line2");
				this.OnLine2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suburb", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Suburb
	{
		get
		{
			return this._Suburb;
		}
		set
		{
			if ((this._Suburb != value))
			{
				this.OnSuburbChanging(value);
				this.SendPropertyChanging();
				this._Suburb = value;
				this.SendPropertyChanged("Suburb");
				this.OnSuburbChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Billing", DbType="Char(1) NOT NULL")]
	public char Billing
	{
		get
		{
			return this._Billing;
		}
		set
		{
			if ((this._Billing != value))
			{
				this.OnBillingChanging(value);
				this.SendPropertyChanging();
				this._Billing = value;
				this.SendPropertyChanged("Billing");
				this.OnBillingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Province
	{
		get
		{
			return this._Province;
		}
		set
		{
			if ((this._Province != value))
			{
				this.OnProvinceChanging(value);
				this.SendPropertyChanging();
				this._Province = value;
				this.SendPropertyChanged("Province");
				this.OnProvinceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Address", Storage="_User", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Addresses.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Addresses.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceLine")]
public partial class InvoiceLine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ProductID;
	
	private int _InvoiceID;
	
	private int _Qty;
	
	private System.Nullable<decimal> _Price;
	
	private EntityRef<Invoice> _Invoice;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnQtyChanging(int value);
    partial void OnQtyChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
	
	public InvoiceLine()
	{
		this._Invoice = default(EntityRef<Invoice>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int NOT NULL")]
	public int InvoiceID
	{
		get
		{
			return this._InvoiceID;
		}
		set
		{
			if ((this._InvoiceID != value))
			{
				if (this._Invoice.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnInvoiceIDChanging(value);
				this.SendPropertyChanging();
				this._InvoiceID = value;
				this.SendPropertyChanged("InvoiceID");
				this.OnInvoiceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int NOT NULL")]
	public int Qty
	{
		get
		{
			return this._Qty;
		}
		set
		{
			if ((this._Qty != value))
			{
				this.OnQtyChanging(value);
				this.SendPropertyChanging();
				this._Qty = value;
				this.SendPropertyChanged("Qty");
				this.OnQtyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
	public System.Nullable<decimal> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceLine", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="ID", IsForeignKey=true)]
	public Invoice Invoice
	{
		get
		{
			return this._Invoice.Entity;
		}
		set
		{
			Invoice previousValue = this._Invoice.Entity;
			if (((previousValue != value) 
						|| (this._Invoice.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Invoice.Entity = null;
					previousValue.InvoiceLines.Remove(this);
				}
				this._Invoice.Entity = value;
				if ((value != null))
				{
					value.InvoiceLines.Add(this);
					this._InvoiceID = value.ID;
				}
				else
				{
					this._InvoiceID = default(int);
				}
				this.SendPropertyChanged("Invoice");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceLine", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.InvoiceLines.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.InvoiceLines.Add(this);
					this._ProductID = value.ID;
				}
				else
				{
					this._ProductID = default(int);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Surname;
	
	private string _Email;
	
	private string _Password;
	
	private string _PhoneNumber;
	
	private string _Status;
	
	private System.Nullable<System.DateTime> _DateRegistered;
	
	private string _UserType;
	
	private int _Points;
	
	private EntitySet<ShoppingList> _ShoppingLists;
	
	private EntitySet<Card> _Cards;
	
	private EntitySet<Device> _Devices;
	
	private EntitySet<Address> _Addresses;
	
	private EntitySet<Invoice> _Invoices;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateRegisteredChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRegisteredChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
	
	public User()
	{
		this._ShoppingLists = new EntitySet<ShoppingList>(new Action<ShoppingList>(this.attach_ShoppingLists), new Action<ShoppingList>(this.detach_ShoppingLists));
		this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
		this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
		this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
		this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Surname
	{
		get
		{
			return this._Surname;
		}
		set
		{
			if ((this._Surname != value))
			{
				this.OnSurnameChanging(value);
				this.SendPropertyChanging();
				this._Surname = value;
				this.SendPropertyChanged("Surname");
				this.OnSurnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Char(10)")]
	public string PhoneNumber
	{
		get
		{
			return this._PhoneNumber;
		}
		set
		{
			if ((this._PhoneNumber != value))
			{
				this.OnPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumber = value;
				this.SendPropertyChanged("PhoneNumber");
				this.OnPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(MAX)")]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRegistered", DbType="Date")]
	public System.Nullable<System.DateTime> DateRegistered
	{
		get
		{
			return this._DateRegistered;
		}
		set
		{
			if ((this._DateRegistered != value))
			{
				this.OnDateRegisteredChanging(value);
				this.SendPropertyChanging();
				this._DateRegistered = value;
				this.SendPropertyChanged("DateRegistered");
				this.OnDateRegisteredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string UserType
	{
		get
		{
			return this._UserType;
		}
		set
		{
			if ((this._UserType != value))
			{
				this.OnUserTypeChanging(value);
				this.SendPropertyChanging();
				this._UserType = value;
				this.SendPropertyChanged("UserType");
				this.OnUserTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
	public int Points
	{
		get
		{
			return this._Points;
		}
		set
		{
			if ((this._Points != value))
			{
				this.OnPointsChanging(value);
				this.SendPropertyChanging();
				this._Points = value;
				this.SendPropertyChanged("Points");
				this.OnPointsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ShoppingList", Storage="_ShoppingLists", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<ShoppingList> ShoppingLists
	{
		get
		{
			return this._ShoppingLists;
		}
		set
		{
			this._ShoppingLists.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Card", Storage="_Cards", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<Card> Cards
	{
		get
		{
			return this._Cards;
		}
		set
		{
			this._Cards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_Devices", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<Device> Devices
	{
		get
		{
			return this._Devices;
		}
		set
		{
			this._Devices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Address", Storage="_Addresses", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<Address> Addresses
	{
		get
		{
			return this._Addresses;
		}
		set
		{
			this._Addresses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<Invoice> Invoices
	{
		get
		{
			return this._Invoices;
		}
		set
		{
			this._Invoices.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ShoppingLists(ShoppingList entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_ShoppingLists(ShoppingList entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Cards(Card entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Cards(Card entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Devices(Device entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Devices(Device entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Addresses(Address entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Addresses(Address entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Invoices(Invoice entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Invoices(Invoice entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CustomerID;
	
	private string _Status;
	
	private System.DateTime _Date;
	
	private System.DateTime _DeliveryDatetime;
	
	private string _Notes;
	
	private decimal _Total;
	
	private int _Points;
	
	private EntitySet<InvoiceLine> _InvoiceLines;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDeliveryDatetimeChanging(System.DateTime value);
    partial void OnDeliveryDatetimeChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnTotalChanging(decimal value);
    partial void OnTotalChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
	
	public Invoice()
	{
		this._InvoiceLines = new EntitySet<InvoiceLine>(new Action<InvoiceLine>(this.attach_InvoiceLines), new Action<InvoiceLine>(this.detach_InvoiceLines));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDatetime", DbType="DateTime NOT NULL")]
	public System.DateTime DeliveryDatetime
	{
		get
		{
			return this._DeliveryDatetime;
		}
		set
		{
			if ((this._DeliveryDatetime != value))
			{
				this.OnDeliveryDatetimeChanging(value);
				this.SendPropertyChanging();
				this._DeliveryDatetime = value;
				this.SendPropertyChanged("DeliveryDatetime");
				this.OnDeliveryDatetimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money NOT NULL")]
	public decimal Total
	{
		get
		{
			return this._Total;
		}
		set
		{
			if ((this._Total != value))
			{
				this.OnTotalChanging(value);
				this.SendPropertyChanging();
				this._Total = value;
				this.SendPropertyChanged("Total");
				this.OnTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
	public int Points
	{
		get
		{
			return this._Points;
		}
		set
		{
			if ((this._Points != value))
			{
				this.OnPointsChanging(value);
				this.SendPropertyChanging();
				this._Points = value;
				this.SendPropertyChanged("Points");
				this.OnPointsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceLine", Storage="_InvoiceLines", ThisKey="ID", OtherKey="InvoiceID")]
	public EntitySet<InvoiceLine> InvoiceLines
	{
		get
		{
			return this._InvoiceLines;
		}
		set
		{
			this._InvoiceLines.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Invoice", Storage="_User", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Invoices.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Invoices.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_InvoiceLines(InvoiceLine entity)
	{
		this.SendPropertyChanging();
		entity.Invoice = this;
	}
	
	private void detach_InvoiceLines(InvoiceLine entity)
	{
		this.SendPropertyChanging();
		entity.Invoice = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private int _SubCategoryID;
	
	private decimal _Price;
	
	private decimal _Cost;
	
	private int _StockOnHand;
	
	private string _Image_Location;
	
	private string _Status;
	
	private EntitySet<InvoiceLine> _InvoiceLines;
	
	private EntitySet<ListProduct> _ListProducts;
	
	private EntityRef<SubCategory> _SubCategory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnStockOnHandChanging(int value);
    partial void OnStockOnHandChanged();
    partial void OnImage_LocationChanging(string value);
    partial void OnImage_LocationChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public Product()
	{
		this._InvoiceLines = new EntitySet<InvoiceLine>(new Action<InvoiceLine>(this.attach_InvoiceLines), new Action<InvoiceLine>(this.detach_InvoiceLines));
		this._ListProducts = new EntitySet<ListProduct>(new Action<ListProduct>(this.attach_ListProducts), new Action<ListProduct>(this.detach_ListProducts));
		this._SubCategory = default(EntityRef<SubCategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", DbType="Int NOT NULL")]
	public int SubCategoryID
	{
		get
		{
			return this._SubCategoryID;
		}
		set
		{
			if ((this._SubCategoryID != value))
			{
				if (this._SubCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._SubCategoryID = value;
				this.SendPropertyChanged("SubCategoryID");
				this.OnSubCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money NOT NULL")]
	public decimal Cost
	{
		get
		{
			return this._Cost;
		}
		set
		{
			if ((this._Cost != value))
			{
				this.OnCostChanging(value);
				this.SendPropertyChanging();
				this._Cost = value;
				this.SendPropertyChanged("Cost");
				this.OnCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockOnHand", DbType="Int NOT NULL")]
	public int StockOnHand
	{
		get
		{
			return this._StockOnHand;
		}
		set
		{
			if ((this._StockOnHand != value))
			{
				this.OnStockOnHandChanging(value);
				this.SendPropertyChanging();
				this._StockOnHand = value;
				this.SendPropertyChanged("StockOnHand");
				this.OnStockOnHandChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Location", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Image_Location
	{
		get
		{
			return this._Image_Location;
		}
		set
		{
			if ((this._Image_Location != value))
			{
				this.OnImage_LocationChanging(value);
				this.SendPropertyChanging();
				this._Image_Location = value;
				this.SendPropertyChanged("Image_Location");
				this.OnImage_LocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceLine", Storage="_InvoiceLines", ThisKey="ID", OtherKey="ProductID")]
	public EntitySet<InvoiceLine> InvoiceLines
	{
		get
		{
			return this._InvoiceLines;
		}
		set
		{
			this._InvoiceLines.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ListProduct", Storage="_ListProducts", ThisKey="ID", OtherKey="ProductID")]
	public EntitySet<ListProduct> ListProducts
	{
		get
		{
			return this._ListProducts;
		}
		set
		{
			this._ListProducts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Product", Storage="_SubCategory", ThisKey="SubCategoryID", OtherKey="SubID", IsForeignKey=true)]
	public SubCategory SubCategory
	{
		get
		{
			return this._SubCategory.Entity;
		}
		set
		{
			SubCategory previousValue = this._SubCategory.Entity;
			if (((previousValue != value) 
						|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SubCategory.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._SubCategory.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._SubCategoryID = value.SubID;
				}
				else
				{
					this._SubCategoryID = default(int);
				}
				this.SendPropertyChanged("SubCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_InvoiceLines(InvoiceLine entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_InvoiceLines(InvoiceLine entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
	
	private void attach_ListProducts(ListProduct entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_ListProducts(ListProduct entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategory")]
public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Status;
	
	private EntitySet<SubCategory> _SubCategories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public ProductCategory()
	{
		this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_SubCategory", Storage="_SubCategories", ThisKey="ID", OtherKey="CategoryID")]
	public EntitySet<SubCategory> SubCategories
	{
		get
		{
			return this._SubCategories;
		}
		set
		{
			this._SubCategories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SubCategories(SubCategory entity)
	{
		this.SendPropertyChanging();
		entity.ProductCategory = this;
	}
	
	private void detach_SubCategories(SubCategory entity)
	{
		this.SendPropertyChanging();
		entity.ProductCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategory")]
public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SubID;
	
	private string _Name;
	
	private int _CategoryID;
	
	private string _Status;
	
	private EntitySet<Product> _Products;
	
	private EntityRef<ProductCategory> _ProductCategory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubIDChanging(int value);
    partial void OnSubIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public SubCategory()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		this._ProductCategory = default(EntityRef<ProductCategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SubID
	{
		get
		{
			return this._SubID;
		}
		set
		{
			if ((this._SubID != value))
			{
				this.OnSubIDChanging(value);
				this.SendPropertyChanging();
				this._SubID = value;
				this.SendPropertyChanged("SubID");
				this.OnSubIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
	public int CategoryID
	{
		get
		{
			return this._CategoryID;
		}
		set
		{
			if ((this._CategoryID != value))
			{
				if (this._ProductCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Product", Storage="_Products", ThisKey="SubID", OtherKey="SubCategoryID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_SubCategory", Storage="_ProductCategory", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true)]
	public ProductCategory ProductCategory
	{
		get
		{
			return this._ProductCategory.Entity;
		}
		set
		{
			ProductCategory previousValue = this._ProductCategory.Entity;
			if (((previousValue != value) 
						|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProductCategory.Entity = null;
					previousValue.SubCategories.Remove(this);
				}
				this._ProductCategory.Entity = value;
				if ((value != null))
				{
					value.SubCategories.Add(this);
					this._CategoryID = value.ID;
				}
				else
				{
					this._CategoryID = default(int);
				}
				this.SendPropertyChanged("ProductCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.SubCategory = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.SubCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListProducts")]
public partial class ListProduct : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ListID;
	
	private int _ProductID;
	
	private int _Quantity_;
	
	private EntityRef<ShoppingList> _ShoppingList;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListIDChanging(int value);
    partial void OnListIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnQuantity_Changing(int value);
    partial void OnQuantity_Changed();
    #endregion
	
	public ListProduct()
	{
		this._ShoppingList = default(EntityRef<ShoppingList>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListID", DbType="Int NOT NULL")]
	public int ListID
	{
		get
		{
			return this._ListID;
		}
		set
		{
			if ((this._ListID != value))
			{
				if (this._ShoppingList.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnListIDChanging(value);
				this.SendPropertyChanging();
				this._ListID = value;
				this.SendPropertyChanged("ListID");
				this.OnListIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Quantity ]", Storage="_Quantity_", DbType="Int NOT NULL")]
	public int Quantity_
	{
		get
		{
			return this._Quantity_;
		}
		set
		{
			if ((this._Quantity_ != value))
			{
				this.OnQuantity_Changing(value);
				this.SendPropertyChanging();
				this._Quantity_ = value;
				this.SendPropertyChanged("Quantity_");
				this.OnQuantity_Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingList_ListProduct", Storage="_ShoppingList", ThisKey="ListID", OtherKey="ID", IsForeignKey=true)]
	public ShoppingList ShoppingList
	{
		get
		{
			return this._ShoppingList.Entity;
		}
		set
		{
			ShoppingList previousValue = this._ShoppingList.Entity;
			if (((previousValue != value) 
						|| (this._ShoppingList.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ShoppingList.Entity = null;
					previousValue.ListProducts.Remove(this);
				}
				this._ShoppingList.Entity = value;
				if ((value != null))
				{
					value.ListProducts.Add(this);
					this._ListID = value.ID;
				}
				else
				{
					this._ListID = default(int);
				}
				this.SendPropertyChanged("ShoppingList");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ListProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.ListProducts.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.ListProducts.Add(this);
					this._ProductID = value.ID;
				}
				else
				{
					this._ProductID = default(int);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
